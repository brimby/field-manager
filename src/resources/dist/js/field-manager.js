$(function(){
// Allow multiple back-end action hooks depending on button clicked. I'm sure there is a better way though!
$(document).on("click",'input[type="submit"]',function(e){e.preventDefault();var t=$(this).parents("form");$(this).attr("data-action")&&$(t).find('input[name="action"]').val($(this).attr("data-action")),$(t).submit()}),
// Clicking on an radio in the Mapping table header will check all other radios in that columns
$(document).on("change","select#groupAll",function(e){e.preventDefault(),$("#fieldmapping .groupSelect select").val($(this).val())}),$(document).on("click","#newgroupbtn",function(e){var t=prompt(Craft.t("field-manager","What do you want to name your group?"),"");if(t){var i={name:t};Craft.postActionRequest("fields/save-group",i,$.proxy(function(e,t){if("success"==t)if(e.success)$("#fieldmapping select#groupAll").append($('<option value="'+e.group.id+'">'+e.group.name+"</option>")).val(e.group.id),$("#fieldmapping .groupSelect select").append($('<option value="'+e.group.id+'">'+e.group.name+"</option>")).val(e.group.id);else if(e.errors){var i=[];for(var a in e.errors)i=i.concat(e.errors[a]);alert(Craft.t("field-manager","Could not create the group:")+"\n\n"+i.join("\n"))}else Craft.cp.displayError()},this))}}),
// Handle top-level checkboxes
$(document).on("change","tr.group .field .checkbox",function(e){e.preventDefault();var t=$(this).parents("tr.group").data("groupid"),i=$('tr.field[data-groupid="'+t+'"] .field .checkbox');$(this).hasClass("hasChecked")?($(this).removeClass("hasChecked"),i.prop("checked",!1)):($(this).addClass("hasChecked"),i.prop("checked",!0))}),
// Handle any checkbox
$(document).on("change","#fieldmanager .checkbox",function(e){e.preventDefault(),0<$("#fieldmanager .checkbox:checked").length?$(".export-btn").removeClass("disabled").prop("disabled",!1):$(".export-btn").addClass("disabled").prop("disabled",!0)}),$(".sidebar-nav a").on("click",function(e){e.preventDefault();var t=$(this).attr("data-groupid");$(".sidebar-nav li").removeClass("active"),$(this).parent().addClass("active"),$("#fieldmanager tbody tr").hide(),"all"==t?$("#fieldmanager tbody tr[data-groupid]").show():$('#fieldmanager tbody tr[data-groupid="'+t+'"]').show()}),$("tr.group .clone-btn").on("click",function(e){new Craft.FieldManager.CloneGroup($(this),$(this).parents("tr.group"))}),$("tr.field .clone-btn").on("click",function(e){new Craft.FieldManager.CloneField($(this),$(this).parents("tr.field"))}),$("tr.group .go a").on("click",function(e){e.metaKey||(e.preventDefault(),new Craft.FieldManager.EditGroup($(this),$(this).parents("tr.group")))}),$("tr.field .go a").on("click",function(e){e.metaKey||(e.preventDefault(),new Craft.FieldManager.EditField($(this),$(this).parents("tr.field")))}),$(".new-field-btn").on("click",function(e){e.metaKey||(e.preventDefault(),new Craft.FieldManager.EditField($(this)))}),
// Handle deleting field group seperately
$(".delete-group").on("click",function(e){if($selectedGroup=$(this).parents("tr.group"),confirm(Craft.t("field-manager","Are you sure you want to delete this group and all its fields?"))){var t={id:$selectedGroup.data("groupid")};Craft.postActionRequest("fields/delete-group",t,$.proxy(function(e,t){"success"==t&&(e.success?location.href=Craft.getUrl("field-manager"):Craft.cp.displayError())},this))}})}),void 0===Craft.FieldManager&&(Craft.FieldManager={}),$(function(){Craft.FieldManager.HandleGeneratorWithSuffix=Craft.BaseInputGenerator.extend({generateTargetValue:function(e){
// Remove HTML tags
var t=e.replace("/<(.*?)>/g","");
// Remove inner-word punctuation
// Make it lowercase
t=(t=t.replace(/['"‘’“”\[\]\(\)\{\}:]/g,"")).toLowerCase(),
// Handle must start with a letter
t=(
// Convert extended ASCII characters to basic ASCII
t=Craft.asciiString(t)).replace(/^[^a-z]+/,"");
// Get the "words"
var i=Craft.filterArray(t.split(/[^a-z0-9]+/));t="";
// Make it camelCase
for(var a=0;a<i.length;a++)t+=0===a?i[a]:i[a].charAt(0).toUpperCase()+i[a].substr(1);return t+"_"}});var n={setValue:function(e,t,i){if(e.length){var a=e.shift();return a?(i[a]=n.setValue(e,t,i[a]||{}),i):i.push?(i.push(t),i):[t]}return t}};$.fn.serializeObject=function(){var e={},t=this.serializeArray(),i=null;return $.each(t,function(){i=this.name.replace(/\]/g,"").split(/\[/),n.setValue(i,this.value,e)}),e}}),// ==========================================================================
// Field Manager Plugin for Craft CMS
// Author: Verbb - https://verbb.io/
// ==========================================================================
// @codekit-prepend "_events.js"    
// @codekit-prepend "_utils.js"    
void 0===Craft.FieldManager&&(Craft.FieldManager={}),$(function(){
// Provide HUD functionality for cloning a group of fields
Craft.FieldManager.CloneGroup=Garnish.Base.extend({$element:null,groupId:null,$form:null,$spinner:null,hud:null,init:function(e,t){this.$element=e,this.groupId=t.data("groupid"),this.$element.addClass("loading");var i={groupId:this.groupId,clone:!0};Craft.postActionRequest("field-manager/base/get-group-modal-body",i,$.proxy(this,"showHud"))},showHud:function(e,t){if(this.$element.removeClass("loading"),e.success){var i=$();this.$form=$("<div/>"),$('<input type="hidden" name="groupId" value="'+this.groupId+'">').appendTo(this.$form),$fieldsContainer=$('<div class="fields"/>').appendTo(this.$form),$fieldsContainer.html(e.html),Craft.initUiElements($fieldsContainer);var a=$('<div class="hud-footer"/>').appendTo(this.$form),n=$('<div class="buttons right"/>').appendTo(a);this.$cancelBtn=$('<div class="btn">'+Craft.t("field-manager","Cancel")+"</div>").appendTo(n),this.$saveBtn=$('<input class="btn submit" type="submit" value="'+Craft.t("field-manager","Clone")+'"/>').appendTo(n),this.$spinner=$('<div class="spinner hidden"/>').appendTo(n),i=i.add(this.$form),this.hud=new Garnish.HUD(this.$element,i,{bodyClass:"body",closeOtherHUDs:!1}),this.hud.on("hide",$.proxy(function(){delete this.hud},this)),this.addListener(this.$saveBtn,"activate","saveGroupField"),this.addListener(this.$cancelBtn,"activate","closeHud"),new Craft.FieldManager.HandleGeneratorWithSuffix("#name","#prefix")}},saveGroupField:function(e){e.preventDefault(),this.$spinner.removeClass("hidden");var t=this.hud.$body.serialize();Craft.postActionRequest("field-manager/base/clone-group",t,$.proxy(function(e,t){this.$spinner.addClass("hidden"),e.error?(Garnish.shake(this.hud.$hud),$.each(e.error,function(e,t){Craft.cp.displayError(t)})):e.success?(Craft.cp.displayNotice(Craft.t("field-manager","Group cloned.")),location.href=Craft.getUrl("field-manager"),this.onFadeOut()):Craft.cp.displayError(Craft.t("field-manager","Could not clone group"))},this))},closeHud:function(){this.hud.hide(),delete this.hud}}),Craft.FieldManager.EditGroup=Garnish.Base.extend({$element:null,groupId:null,$form:null,$spinner:null,hud:null,init:function(e,t){this.$element=e,this.groupId=t.data("groupid"),this.$element.addClass("loading");var i={groupId:this.groupId};Craft.postActionRequest("field-manager/base/get-group-modal-body",i,$.proxy(this,"showHud"))},showHud:function(e,t){if(this.$element.removeClass("loading"),e.success){var i=$();this.$form=$("<div/>"),$('<input type="hidden" name="groupId" value="'+this.groupId+'">').appendTo(this.$form),$fieldsContainer=$('<div class="fields"/>').appendTo(this.$form),$fieldsContainer.html(e.html),Craft.initUiElements($fieldsContainer);var a=$('<div class="hud-footer"/>').appendTo(this.$form),n=$('<div class="buttons right"/>').appendTo(a);this.$cancelBtn=$('<div class="btn">'+Craft.t("field-manager","Cancel")+"</div>").appendTo(n),this.$saveBtn=$('<input class="btn submit" type="submit" value="'+Craft.t("field-manager","Save")+'"/>').appendTo(n),this.$spinner=$('<div class="spinner hidden"/>').appendTo(n),i=i.add(this.$form),this.hud=new Garnish.HUD(this.$element,i,{bodyClass:"body",closeOtherHUDs:!1}),this.hud.on("hide",$.proxy(function(){delete this.hud},this)),this.addListener(this.$saveBtn,"activate","saveGroupField"),this.addListener(this.$cancelBtn,"activate","closeHud")}},saveGroupField:function(e){e.preventDefault(),this.$spinner.removeClass("hidden");var t=this.hud.$body.serialize();Craft.postActionRequest("fields/save-group",t,$.proxy(function(e,t){this.$spinner.addClass("hidden"),"success"==t&&e.success?(location.href=Craft.getUrl("field-manager"),Craft.cp.displayNotice(Craft.t("field-manager","Field group updated.")),this.closeHud()):Garnish.shake(this.hud.$hud)},this))},closeHud:function(){this.hud.hide(),delete this.hud}}),Craft.FieldManager.CloneField=Garnish.Modal.extend({fieldId:null,groupId:null,$body:null,$element:null,$buttons:null,$cancelBtn:null,$saveBtn:null,$footerSpinner:null,init:function(e,t){this.$element=e,this.fieldId=t.data("id"),this.groupId=t.data("groupid");
// Build the modal
var i=$('<div class="modal fieldsettingsmodal"></div>').appendTo(Garnish.$bod),a=$('<div class="body"><div class="spinner big"></div></div>').appendTo(i),n=$('<div class="footer"/>').appendTo(i);this.base(i,this.settings),this.$footerSpinner=$('<div class="spinner hidden"/>').appendTo(n),this.$buttons=$('<div class="buttons rightalign first"/>').appendTo(n),this.$cancelBtn=$('<div class="btn">'+Craft.t("field-manager","Cancel")+"</div>").appendTo(this.$buttons),this.fieldId?this.$saveBtn=$('<div class="btn submit">'+Craft.t("field-manager","Clone")+"</div>").appendTo(this.$buttons):this.$saveBtn=$('<div class="btn submit">'+Craft.t("field-manager","Add field")+"</div>").appendTo(this.$buttons),this.$body=a,this.addListener(this.$cancelBtn,"activate","onFadeOut"),this.addListener(this.$saveBtn,"activate","saveSettings")},onFadeIn:function(){var e={fieldId:this.fieldId,groupId:this.groupId};Craft.postActionRequest("field-manager/base/get-field-modal-body",e,$.proxy(function(e,t){e.success&&(this.$body.html(e.html),Craft.appendHeadHtml(e.headHtml),Craft.appendFootHtml(e.footHtml),Craft.initUiElements(this.$body),new Craft.HandleGenerator("#name","#handle"))},this)),this.base()},onFadeOut:function(){this.hide(),this.destroy(),this.$shade.remove(),this.$container.remove(),this.removeListener(this.$saveBtn,"click"),this.removeListener(this.$cancelBtn,"click")},saveSettings:function(){var e=this.$body.find("form").serializeObject();e.fieldId=this.fieldId,this.$footerSpinner.removeClass("hidden"),Craft.postActionRequest("field-manager/base/clone-field",e,$.proxy(function(e,t){this.$footerSpinner.addClass("hidden"),e.error?$.each(e.error,function(e,t){Craft.cp.displayError(t)}):e.success?(Craft.cp.displayNotice(Craft.t("field-manager","Field cloned.")),location.href=Craft.getUrl("field-manager"),this.onFadeOut()):Craft.cp.displayError(Craft.t("field-manager","Could not clone field"))},this)),this.removeListener(this.$saveBtn,"click"),this.removeListener(this.$cancelBtn,"click")},show:function(){this.base()}}),Craft.FieldManager.EditField=Garnish.Modal.extend({fieldId:null,groupId:null,$body:null,$element:null,$buttons:null,$cancelBtn:null,$saveBtn:null,$footerSpinner:null,init:function(e,t){this.$element=e,t&&(this.fieldId=t.data("id"),this.groupId=t.data("groupid"));
// Build the modal
var i=$('<div class="modal fieldsettingsmodal"></div>').appendTo(Garnish.$bod),a=$('<div class="body"><div class="spinner big"></div></div>').appendTo(i),n=$('<div class="footer"/>').appendTo(i);this.base(i,this.settings),this.$footerSpinner=$('<div class="spinner hidden"/>').appendTo(n),this.$buttons=$('<div class="buttons rightalign first"/>').appendTo(n),this.$cancelBtn=$('<div class="btn">'+Craft.t("field-manager","Cancel")+"</div>").appendTo(this.$buttons),this.$saveBtn=$('<div class="btn submit">'+Craft.t("field-manager","Save")+"</div>").appendTo(this.$buttons),this.$body=a,this.addListener(this.$cancelBtn,"activate","onFadeOut"),this.addListener(this.$saveBtn,"activate","saveSettings")},onFadeIn:function(){var e={fieldId:this.fieldId,groupId:this.groupId};Craft.postActionRequest("field-manager/base/get-field-modal-body",e,$.proxy(function(e,t){e.success&&(this.$body.html(e.html),Craft.appendHeadHtml(e.headHtml),Craft.appendFootHtml(e.footHtml),Craft.initUiElements(this.$body),new Craft.HandleGenerator("#name","#handle"))},this)),this.base()},onFadeOut:function(){this.hide(),this.destroy(),this.$shade.remove(),this.$container.remove(),this.removeListener(this.$saveBtn,"click"),this.removeListener(this.$cancelBtn,"click")},saveSettings:function(){var e=this.$body.find("form").serialize();this.$footerSpinner.removeClass("hidden"),Craft.postActionRequest("field-manager/base/save-field",e,$.proxy(function(e,t){this.$footerSpinner.addClass("hidden"),e.error?(Garnish.shake(this.$container),$.each(e.error,function(e,t){Craft.cp.displayError(t)})):e.success?(Craft.cp.displayNotice(Craft.t("field-manager","Field updated.")),location.href=Craft.getUrl("field-manager"),this.onFadeOut()):(Garnish.shake(this.$container),Craft.cp.displayError(Craft.t("field-manager","Could not update field")))},this)),this.removeListener(this.$saveBtn,"click"),this.removeListener(this.$cancelBtn,"click")},show:function(){this.base()}})});
//# sourceMappingURL=field-manager.js.map